/*
1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –ö–æ–º–Ω–∞—Ç–∞. –£ –∫–æ–º–Ω–∞—Ç—ã –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä—ã W –Ω–∞ H. –ò —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –ü–µ—Ä—Å–æ–Ω–∞–∂. –£ –Ω–µ–≥–æ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ X –∏ Y. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∫—Ä–∞—Å–∏–≤–µ–Ω—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
 */
/*
2. –ü–µ—Ä—Å–æ–Ω–∞–∂—É –¥–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –∏–¥—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç–Ω—É–º—á–∏–∫ –ª–µ–≤–æ, –ø—Ä–∞–≤–æ, –≤–µ—Ä—Ö, –≤–Ω–∏–∑
–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–¥–≤–∏–≥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –ø–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏
 */

import Darwin

enum Direction {
    case left
    case right
    case up
    case down
}

struct Hero {
    var x: Int {
        didSet {
            if x < Room.height || x > 4 {
               x = oldValue
            }
        }
    }
    var y: Int {
        didSet {
            if y < Room.width || y > 4 {
                y = oldValue
            }
        }
    }
}

struct Box {
    var x: Int {
        didSet {
            if x < Room.height || x > 4 {
                x = oldValue
            }
        }
    }
    var y: Int {
        didSet {
            if y < Room.width || y > 4 {
                y = oldValue
            }
        }
    }
}

struct Room {
   static var width = 4
   static var height = 4
    var hero: Hero
    var box: Box
    
    func printMe() {
        for x in 1...Room.width {
            var line = ""
            for y in 1...Room.height {
                let cell = hero.x == x && hero.y == y ? "üòÅ" : "‚óΩÔ∏è"
                line = "\(line)\(cell)"
            }
            print(line)
        }
        
        if hero.x == box.x && hero.y == box.y {
            
        }
        
    }
    
    mutating func move(direction: Direction) {
        switch direction {
        case .left:
            hero.y -= 1
        case .right:
            hero.y += 1
        case .up:
            hero.x -= 1
        case .down:
            hero.x += 1
        }
    }
}
let hero = Hero(x: 3, y: 1)
let box = Box(x: 4, y: 1)
var room = Room(hero: hero, box: box)
room.printMe()
room.move(direction: .down)
print("go")
room.printMe()
print("go")
room.move(direction: .right)
room.printMe()
 


